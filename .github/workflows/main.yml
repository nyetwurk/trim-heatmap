name: Build and Release
on:
  push:
  pull_request:
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd src
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        cd src
        python heatmap.py --test

  build:
    runs-on: windows-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - uses: rlespinasse/github-slug-action@v4
      if: ${{ github.event_name != 'release' }}
      with:
        short-length: 4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Cache PyInstaller build
      uses: actions/cache@v4
      with:
        path: |
          src/build
          src/dist
        key: ${{ runner.os }}-pyinstaller-${{ hashFiles('src/heatmap.py', 'src/heatmap.spec', 'src/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pyinstaller-

    - name: Install dependencies
      run: |
        cd src
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        cd src
        pyinstaller -y --dist ./dist/windows --workpath /tmp heatmap.spec

    - uses: actions/upload-artifact@v4
      if: ${{ github.event_name != 'release' }}
      with:
        name: trim-heatmap-${{ env.GITHUB_SHA_SHORT }}-win
        path: src/dist/windows
        overwrite: true

    - name: Create Release from Tag
      if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'release'
      run: |
        cd src/dist/windows
        Compress-Archive -Path * -DestinationPath trim-heatmap-${{ github.ref_name }}-win.zip -Force
        gh release create ${{ github.ref_name }} --title "Release ${{ github.ref_name }}" --generate-notes trim-heatmap-${{ github.ref_name }}-win.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Artifact to Release
      if: github.event_name == 'release' && github.event.action == 'published'
      run: |
        cd src/dist/windows
        Compress-Archive -Path * -DestinationPath trim-heatmap-${{ github.ref_name }}-win.zip -Force
        gh release upload --clobber ${{ github.ref_name }} trim-heatmap-${{ github.ref_name }}-win.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
